name: "publish online"

on:
  push:
    branches:
      - master

# This is the example from the readme.
# On each push to the `release` branch it will create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--verbose --target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--verbose --target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: Read version from JSON (Cross-Platform)
        id: version
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            VERSION=$(powershell -Command "(Get-Content src-tauri/web-dist/version.json | ConvertFrom-Json).version")
            BUILD_NUMBER=$(powershell -Command "(Get-Content src-tauri/web-dist/version.json | ConvertFrom-Json).build_number")
          else
            VERSION=$(jq -r '.version' src-tauri/web-dist/version.json)
            BUILD_NUMBER=$(jq -r '.build_number' src-tauri/web-dist/version.json)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Use Online Installer Config (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Copy-Item src-tauri/tauri.online.json src-tauri/tauri.conf.json
          (Get-Content src-tauri/tauri.conf.json) -replace '__VERSION_REPLACE_THIS__', "${{ env.VERSION }}" | Set-Content src-tauri/tauri.conf.json
  
      - name: Use Online Installer Config (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cp src-tauri/tauri.online.json src-tauri/tauri.conf.json
          if [ "$(uname)" = "Darwin" ]; then
            sed -i '' "s/__VERSION_REPLACE_THIS__/${{ env.VERSION }}/g" src-tauri/tauri.conf.json
          else
            sed -i "s/__VERSION_REPLACE_THIS__/${{ env.VERSION }}/g" src-tauri/tauri.conf.json
          fi

      # Step for macOS notarization setup
      - name: Setup Notarization Credentials
        if: matrix.platform == 'macos-latest'
        run: |
          # Create private key file from secret
          mkdir -p $HOME/private_keys
          echo "${{ secrets.APPLE_API_KEY_CONTENT }}" > $HOME/private_keys/AuthKey_${{ secrets.APPLE_API_KEY }}.p8
          echo "APPLE_API_KEY_PATH=$HOME/private_keys/AuthKey_${{ secrets.APPLE_API_KEY }}.p8" >> $GITHUB_ENV

      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
        
      - name: Verify Certificate
        if: matrix.platform == 'macos-latest'
        run: |
          # Try to find Developer ID Application certificate first
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" || echo "")
          
          # If not found, get the first available certificate
          if [[ -z "$CERT_INFO" ]]; then
            echo "No Developer ID Application certificate found, using first available certificate"
            CERT_INFO=$(security find-identity -v -p codesigning build.keychain | head -n 1)
          fi
          
          # Extract the full certificate name, not just the ID
          if [[ -n "$CERT_INFO" ]]; then
            # Find the certificate common name in quotes
            CERT_ID=$(echo "$CERT_INFO" | sed -n 's/.*\("[^"]*"\).*/\1/p' | tr -d '"')
            echo "Found certificate: $CERT_ID"
            echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          else
            echo "No codesigning certificates found in keychain."
            exit 1
          fi

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: ${{ env.APPLE_API_KEY_PATH }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: "app-v${{ env.VERSION }}-build-${{ env.BUILD_NUMBER }}"
          releaseName: "App v${{ env.VERSION }} (Build ${{ env.BUILD_NUMBER }})"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Set APP_PATH
        if: matrix.platform == 'macos-latest'
        run: |
          ARCH="${{ contains(matrix.args, 'aarch64') && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}"
          APP_PATH=$(find src-tauri/target/$ARCH/release/bundle/macos -name '*.app' | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: Could not find .app!"
            exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV

      - name: Sign WASM files
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Looking for .wasm inside ${{ env.APP_PATH }}/Contents..."
          WASM_FILES=$(find "${{ env.APP_PATH }}/Contents" -name '*.wasm' -type f)
          if [ -z "$WASM_FILES" ]; then
            echo "No .wasm files found."
          else
            echo "Found .wasm:"
            echo "$WASM_FILES"
            while IFS= read -r wasm; do
              echo "Signing $wasm..."
              codesign --force --options runtime --timestamp --sign "${{ env.CERT_ID }}" "$wasm"
            done <<< "$WASM_FILES"
          fi
        
      - name: Re-sign .app
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Re-signing the entire .app..."
          codesign --force --deep --options runtime --timestamp --sign "${{ env.CERT_ID }}" "${{ env.APP_PATH }}"
          codesign --verify --deep --verbose=2 "${{ env.APP_PATH }}"

      - name: Create DMG from Updated .app
        if: matrix.platform == 'macos-latest'
        run: |
          ARCH="${{ contains(matrix.args, 'aarch64') && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}"
          DMG_NAME="Heat Wallet_v${{ env.VERSION }}_${ARCH}.dmg"
          # Create a temporary folder to structure the DMG
          TEMP_DMG_FOLDER="HeatWalletDMG"
          mkdir -p "$TEMP_DMG_FOLDER"
          # Copy the app bundle into the DMG structure
          cp -R "${{ env.APP_PATH }}" "$TEMP_DMG_FOLDER/"
          # Create an alias to /Applications for drag & drop install
          ln -s /Applications "$TEMP_DMG_FOLDER/Applications"
          # Generate the DMG with proper layout
          hdiutil create -volname "Heat Wallet" -srcfolder "$TEMP_DMG_FOLDER" -ov -format UDZO "$DMG_NAME"
          # Clean up temp folder
          rm -rf "$TEMP_DMG_FOLDER"
          # Set DMG path as an environment variable for later steps
          echo "DMG_PATH=$DMG_NAME" >> $GITHUB_ENV

      - name: Sign the DMG
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Signing ${{ env.DMG_PATH }}..."
          codesign --force --timestamp --sign "${{ env.CERT_ID }}" "${{ env.DMG_PATH }}"
          codesign --verify --verbose=2 "${{ env.DMG_PATH }}"

      - name: Notarize DMG
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_PATH: ${{ env.APPLE_API_KEY_PATH }}
        run: |
          echo "Submitting for notarization: ${{ env.DMG_PATH }}"
          xcrun notarytool submit "${{ env.DMG_PATH }}" \
            --key "$APPLE_API_KEY_PATH" \
            --issuer "$APPLE_API_ISSUER" \
            --key-id "$APPLE_API_KEY" \
            --wait
        
      - name: Staple Notarization
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Stapling ${{ env.DMG_PATH }}..."
          xcrun stapler staple "${{ env.DMG_PATH }}"
          xcrun stapler validate "${{ env.DMG_PATH }}"
  
      - name: Upload Notarized DMG to Existing GitHub Release
        if: matrix.platform == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="app-v${{ env.VERSION }}-build-${{ env.BUILD_NUMBER }}"
          echo "Uploading ${{ env.DMG_PATH }} to release $TAG_NAME..."
          gh release upload "$TAG_NAME" "${{ env.DMG_PATH }}" --clobber
